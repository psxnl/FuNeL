#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1513] =
    {   0,
        0,    0,   89,   87,   86,   86,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   86,    0,   85,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
        0,    0,   39,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,   42,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   43,    0,    0,    0,    0,    0,
        3,    0,    0,    0,    0,   30,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   50,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   82,    0,
        0,    0,    0,    0,    0,   43,   43,    0,    0,    0,
        0,    0,    3,    3,    0,    0,    0,    0,   30,   30,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,   38,
        0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
        0,    0,    0,    0,    3,    0,    0,    0,   33,   30,
        0,   31,    0,    0,   34,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   48,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   33,   33,    0,   31,   31,    0,    0,
       34,   34,    0,    0,    0,    0,    0,   44,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
        0,    0,   52,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
        0,   31,    0,    0,   34,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   41,   41,   65,   27,   51,    0,   67,    0,
        0,   49,    0,   53,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   40,   37,    0,    0,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
        0,    0,   41,    0,   67,   67,   70,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    0,    0,    0,

        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   28,    0,    0,   67,   70,   70,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,    0,    0,   66,    0,    0,
        0,   14,    0,    0,    0,    0,    0,    0,    0,    2,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   14,   14,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   35,    0,    0,    0,    0,
        0,    0,    0,   18,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,    0,    0,    8,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   14,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   62,    0,    0,    0,    0,   69,    0,    0,    0,
        0,    0,    0,    0,    0,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
        0,    0,    0,   80,    0,   22,    0,    0,    0,    0,
        0,    0,   62,   62,    0,    9,    0,    0,   69,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,    0,    0,    0,    0,    0,    0,   73,    0,
        0,   55,   74,   79,   80,   80,   20,    0,    0,    0,
        0,   77,   62,    0,    0,    0,   69,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,   16,

        0,    0,    0,    0,    0,    0,   73,   73,    0,    0,
       55,   55,   74,   74,   79,   79,   80,   21,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       57,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,   73,    0,    0,   55,   74,
       79,    0,    0,    0,    0,   63,    0,   58,    0,   81,
        0,    0,    0,   57,   57,    0,    0,    0,    0,    0,
        0,    0,   15,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,   63,   63,    0,    0,    0,    0,
        0,   57,    0,    0,    0,    0,    0,    0,    0,   15,

       15,    0,    0,    0,    0,    0,   23,   36,    0,    0,
        0,   63,    0,   84,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,    0,
       23,   23,   36,   36,    0,    0,    0,   83,    0,    0,
       60,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   47,    0,   23,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
        0,    0,    0,   78,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   71,   59,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   68,    0,

        0,    0,    0,    0,    0,    0,    6,    5,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,   25,    0,    0,    0,    0,    0,    0,
        0,   25,   25,    0,    0,    0,    0,    0,    0,    0,
       25,    0,    0,   76,   75,    0,    0,    0,    0,    0,
       76,   76,   75,   75,    0,    0,    0,    0,   72,   76,
       75,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
        0,    0,    0,    0,    0,    0,    0,   26,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   45,    0,    0,   64,    0,    0,    0,    0,    0,
       46,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    1,    8,    8,    9,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       19,   26,   27,   28,   29,   30,   31,   32,   33,   34,
        1,    1,    1,    1,    1,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   19,   44,   45,   46,   47,
       48,   49,   19,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1519] =
    {   0,
        0,    0, 3032, 3033,   57,   60, 3028,   52,   38,   51,
       65,   50,   60,   65,   64,   50,   96,   98,  109,  114,
      133,   62,   61,   64,  138, 3027, 3033,  107,  105,  106,
      122,  142,  102,  134,  136,  148,  153,  144,  150,  150,
      155,  148,  151,  165,  162, 3025,  153,  165,  164,  167,
      170,  170,  176,  175,  183,  180,  179,  185,  193,  196,
      194,  209,  193,  211,  206, 3024,  209,  217,  221,  208,
      225,  216,  225,  237, 3023,  224,  224,  226,  232,  230,
      246,  238,  239,  238,  242,  278,  257, 3022,  251,  262,
     3021,  267,  272, 3020,  272,  251,  271,  275,  263,  283,

      283,  287,  272,  278,  295,  284, 3019,  298,  290,  302,
      303,  299,  297,  299,  302, 3018,  302,  307, 3017,  315,
      321,  324,  329,  315,  318,  319,  328,  337,  337,  319,
      331,  345,  341,  339,  355,  344, 3016,  367,  351,  359,
      356, 3015,  344,  364,  361,  367,  366, 3014,  362, 3013,
      368,  376,  377,  385,  381,  379, 3012,  383, 3011, 3010,
      401,  390,  400,  398,  412,  421,  398,  401,  401,  404,
      408,  409,  417,  431,  416,  424,  420,  419,  423,  430,
      426,  447,  441,  448,  447,  454,  445,  445,  443,  455,
      454,  462,  463,  495,  462,  466,  465,  473,  479,  498,

      473,  483, 3009, 3008,  493,  494,  493,  505,  503,  501,
      499,  500,  517,  507,  516,  519,  523,  540,  526,  520,
      535, 3007,  533,  550,  549, 3006,  550,  546,  547, 3033,
      555,  544, 3033,  546,  554,  555,  546,  552,  565,  564,
      564,  572,  558,  568,  571, 3005,  567,  569,  579,  592,
      588,  598,  591,  601,  601,  602,  603, 3004,  594,  608,
     3003,  603,  614,  612,  606,  615,  608,  617,  620,  624,
      635,  636,  639,  636,  639,  647,  648, 3002, 3001,  636,
      637,  638,  644,  646, 3000,  643, 2999,  654,  660,  653,
      660,  660,  656,  655,  673,  670,  671, 2998,  677,  667,

      674,  685, 2997,  674,  681,  685,  688,  685,  699,  700,
      693,  695,  702,  694,  707,  704,  713,  715,  731,  703,
     2996,  705,  715,  709,  717,  729,  726,  727,  730,  732,
      739,  746,  752,  741,  738, 2995, 2994,  743,  740, 2993,
      743,   76,  759,  754,  756,  751,  759,  757,  763,  761,
      771,  774,  767,  780, 2992,  766,  779,  777,  783,  783,
      783,  794,  800,  796,  805,  799,  802, 2991,  803,  808,
      802,  814, 2990, 2989,  804,  815,  814,  819, 2988,  819,
      817,  818,  824,  830,  826,  841,  838,  832,  844,  829,
      854,  851,  846,  847,  853,  853,  855,  851,  856, 2987,

      870,  861,  869,  874,  890, 2986,  903,  870,  867,  868,
      874,  871,  876,  895,  896,  908,  891,  909,  913,  898,
      915,  919,  904,  918,  922,  906, 2985,  914, 2984,  928,
      913,  914,  922,  117,  936,  923,  923,  932,  938,  262,
      931,  936,  934,  953,  962,  950,  948,  948,  960,  952,
     2983,  954,  956,  971,  973,  968,  981,  971,  975,  973,
     2982,  973,  974,  991,  981,  992, 2981,  984,  992,  987,
      993, 2980,  992,  998, 1014, 1003, 1020, 1039, 1022, 1016,
     1026, 1027, 1015, 1011, 1023, 1024, 1027, 1031, 1029, 1032,
     1029, 1032, 1032, 2979, 1050, 1051, 1056, 1061, 1043, 1041,

     1052, 1057, 2978, 1053, 1085, 1054, 1058, 1059, 1074, 1075,
     1094, 1075, 1079, 1086, 2977, 1108, 1078, 2976, 2975, 1098,
     2974, 1101, 1090, 1098, 1091, 1097, 1108, 1097, 2973, 1111,
     1108, 1117, 1118, 1104, 3033, 2972, 2971, 1106, 1122, 1112,
     1103, 1117, 1116, 1131, 1125, 1136, 1129, 1135, 1153, 1140,
     1144, 1142, 1143, 1155, 1150, 1148, 1160, 1152, 1166, 1161,
     1167, 1167, 1163, 1170, 1181, 1165, 2970, 1174, 1206, 1183,
     1187, 2969, 1181, 1181, 1195, 1212, 1216, 1184, 1202, 2968,
     1206, 1214, 1224, 1230, 1200, 1214, 1215, 1236, 1238, 1241,
     1222, 1247, 1230, 1230, 1249, 1237, 1237, 1236, 1246, 2967,

     2966, 2965, 1240, 1242, 1246, 1249, 1250, 3033, 1264, 1247,
     2964, 1245, 1256, 1254, 2963, 1253, 1261, 1268, 1259, 1273,
     1259, 1273, 1282, 1272, 1280, 1279, 1279, 1285, 1296, 2962,
     2961, 2960, 1284, 2959, 1292, 1291, 1288, 1293, 1310, 3033,
     1293, 1297, 1299, 1308, 1300, 1306, 1316, 1306, 1334, 1320,
     1327, 1318, 1318, 1329, 1349, 1336, 1336, 1331, 1354, 1358,
     1354, 1369, 1342, 1353, 1373, 1357, 2958, 1364, 1359, 1373,
     1378, 1364, 1366, 1365, 1377, 1376, 1379, 1392, 1379, 1374,
     1376, 1394, 1380, 1400, 1382, 1390, 1404, 1399, 1401, 2957,
     1399, 1398, 2956, 1398, 1404, 1417, 1410, 2955, 1416, 1409,

     1426, 1421, 1416, 1426, 1428, 1419, 1427, 1437, 2954, 1423,
     1438, 1437, 2953, 1440, 1432, 1439, 2952, 1446, 1437, 1441,
     1446, 1439, 1465, 1475, 1480, 1457, 1485, 1496, 1467, 1464,
     1498, 1501, 1478, 1488, 1473, 1500, 1490, 1509, 1499, 1491,
     1506, 2951, 1490, 1502, 1493, 1504, 2950, 1501, 1501, 1523,
     1505, 1518, 3033, 1509, 1516, 1546, 2949, 1532,    0, 2948,
     1521, 2947, 2946, 1523, 1521, 1534, 1532, 1536, 1548, 2945,
     2944, 1540, 2943, 1538, 1561, 1562, 1557, 2942, 1567, 1567,
     1568, 2941, 1569, 1571, 1559, 1567, 2940, 1572, 1568, 1583,
     1575, 1586, 1569, 1584, 1592, 1591, 1593, 1592, 1594, 2939,

     1604, 2938, 1605, 1604, 1594, 1599, 1595, 1608, 1614, 1617,
     2937, 2936, 1619, 1643, 3033, 3033, 3033, 1605, 1647, 1623,
     1607,    0, 1618, 3033, 1611, 1617, 1631, 1634, 1647, 1636,
     1640, 1643, 1636, 1636, 1637, 1647, 3033, 1666, 1649, 1644,
     1650, 1669, 1647, 1659, 1677, 1653, 1657, 1669, 1682, 1689,
     2935, 2934, 1665, 1674, 2933, 2932, 1687, 1680, 1684,    0,
     1682, 1684, 1683, 1684, 1687, 1691, 1697, 2931, 1694, 1710,
     1713, 1712, 1720, 1708, 1734, 1737, 1745, 1707, 1716, 1719,
     1720, 2930, 1724, 1730, 1730, 2921, 1744, 1733, 1751, 1748,
     1755, 2920, 2919, 1754, 2917, 2916, 1758, 1740, 1741, 2915,

     1741, 1768, 1757, 1757, 1768, 1761, 1767, 1773, 1769, 1783,
     1776,    0, 1773, 1772, 1790, 1795, 1784, 1790, 1782, 1805,
     2914, 1809, 1785, 1792, 1818, 1828, 1833, 1795, 2913, 1818,
     1823, 1827, 1833, 1818, 1820,    0, 1832, 1834, 1829, 1825,
     1820, 1831, 1845, 1848, 1831, 1845, 1851, 1838, 2912, 1844,
     1855, 1858, 1884, 1854, 1848, 2910, 1849, 1863, 1861, 1860,
     1868, 1867, 2908, 1877, 1877, 1883, 1876, 1889, 2907, 1885,
     1896, 1884, 1886, 1883, 1906, 2906, 1881, 1888, 1889, 1905,
     1896, 2905, 1902,    0, 1900, 1902, 1901, 3033, 2867, 2839,
     1903, 1930, 1914, 1932, 1917, 1925, 1934, 1921, 1930, 1950,

     1929, 1932, 1953, 1933, 1938, 1948, 1942, 1946, 1959, 1969,
     1964, 1967, 2837, 1966, 2830, 1960, 1964, 1961, 1963, 2826,
        0, 1965, 1974, 1968, 1969, 1975, 1985, 1969, 1982, 2822,
     1988, 1991, 1993, 2818, 2004, 2024, 1991, 2004, 2746, 2010,
     1998, 2012, 2002, 2006, 2025, 2029, 2012, 2016, 2015, 2016,
     2727, 2719, 2021, 2041, 2029, 2651, 2042, 2033, 2047, 2031,
     2573, 2045, 2034, 2054,    0, 2042, 2043, 3033, 2043, 2049,
     2048, 2061, 2055, 2059, 2055, 2062, 2065, 2058, 2079, 2512,
     2062, 2073, 2064, 2072, 2073, 2443, 2383, 2074, 2100, 2104,
     2379, 2306, 2298, 2254, 2110, 2116, 2084, 2101, 2106, 2093,

     2114, 2124, 2110,    0, 2122, 2113, 2134, 2125, 2116, 2247,
     2123, 2123, 2122, 2126, 2121, 3033, 2140, 2142, 2132, 2148,
     2135, 2139, 2137, 2139, 2157, 2138, 2172, 2156, 2176, 2162,
     2179, 2186, 2188, 2195, 2197, 2199, 2178, 2172, 2186, 2183,
     2182, 2184, 2204, 2210, 2203,    0, 2197, 2190, 2215, 2219,
     2197, 2211, 2212, 2238, 2205, 2227, 2178, 2209, 2210, 2211,
     2223, 2239, 2217, 2231, 2236, 2225, 2225, 2239, 2256, 2235,
     2245, 2262, 2271, 2277, 2264, 2280, 2169, 2254, 2280, 2278,
     2267, 3033, 2286, 2132, 2284, 2283, 2290, 2269, 2289, 2280,
     2273, 2279, 2299, 2291, 2283, 2285, 2286, 2286, 2323, 2332,

     2088, 2290, 2296, 2301, 2311, 2305, 2337, 2343, 2325, 2340,
     2347, 2351, 2353, 2356, 2358, 2361, 2365, 3033, 1960, 2345,
     2361, 2358, 2371, 2367, 2355, 2364, 2357, 2372, 2368, 2364,
     2382, 2364, 2376, 2369, 1845, 2376, 2379, 2380, 2395, 2405,
     2381, 1755, 2376, 2385, 2398, 2417, 1654, 1559, 2419, 2423,
     2426, 2428, 2394, 2395, 2418, 2435, 2410, 3033, 2416, 3033,
     2428, 2420, 2419, 2442, 2448, 2438, 2432, 2439, 2435, 2445,
     2446, 2454, 2458, 2458, 2451, 2456, 2451, 1477, 2467, 2471,
     2479, 2463, 2466, 2461, 2483, 2492, 2482, 2481, 2472, 2486,
     2490, 2499, 2484, 2491, 2484, 2497, 2495, 2497, 2496, 2510,

     2516, 2499, 2504, 2505, 1428, 2511, 2538, 2541, 2510, 2513,
     2511, 2534, 2525, 3033, 2535, 1401, 2532, 2544, 2532, 1277,
     1182, 2547, 2548, 2546, 2557, 2549, 2550,  991, 2561, 2557,
     2564, 2590, 2566, 2593, 2564, 2565, 2570, 3033, 2572, 2561,
     3033, 2562, 2574, 2572, 2585, 2577, 2578, 2573, 2574, 2583,
     2613, 2615, 2586, 2617, 2621,  986,  975, 2588, 2588, 2597,
     2615, 2612, 2621, 2610, 2613, 2615, 2634, 2635,  931, 2638,
     2621, 2641, 2643, 3033, 2643, 2644, 2632, 2636, 2640, 2635,
      759,  724, 2637, 2639, 2665,  609, 2667, 2674, 2647, 2645,
     2654, 2671,  500, 2660, 2685, 2688, 2670, 2672, 2690, 2688,

      490, 2674,  488,  483, 2675, 2686, 2697, 2699, 2687, 2688,
     2693, 2702,  347, 2709, 2711, 2704, 2711, 2701, 2705, 2720,
     2702, 2721, 2731, 2735, 2720, 2708,  244,  230, 2718, 2735,
     2725, 2745, 2755, 2733, 2732, 2757, 2759, 2743, 2745, 2748,
     2768, 2747, 2764, 2778, 2781, 2761, 2749, 2756, 2758, 2765,
     2790, 2793, 2800, 2803, 2765,  177, 2766,  166, 3033, 2805,
     2810, 2802, 2803, 2799, 2803, 2811, 2799, 2798, 2815, 2805,
     2818, 2819, 2812, 2809, 2811, 2812, 2823,  161, 2830, 3033,
     2814, 2839, 2816, 2836, 2828, 2846, 2851, 3033,  133, 2860,
     2848, 2859, 2852, 2853, 2854,  125, 2852, 2868, 2874,  113,

      111, 2876, 2878, 2861, 2884, 2873, 2887, 2879,   77, 2896,
     2899, 3033, 2926, 2928,   71,   67, 2930,   63
    } ;

static yyconst flex_int16_t yy_def[1519] =
    {   0,
     1512,    1, 1512, 1512, 1512, 1512, 1513, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1513, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1514, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1514, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1515,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1515, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1516, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1516, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1517, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1517, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1518, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1518, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512,    0, 1512, 1512, 1512, 1512, 1512, 1512
    } ;

static yyconst flex_int16_t yy_nxt[3092] =
    {   0,
        4,    5,    6,    5,    7,    4,    4,    4,    4,    8,
        9,   10,   11,   12,   13,    4,   14,   15,    4,   16,
        4,   17,   18,    4,   19,   20,   21,   22,   23,    4,
       24,    4,    4,    4,    8,    9,   10,   11,   12,   13,
        4,   14,   15,   16,    4,   17,   18,    4,   19,   20,
       21,   22,   23,    4,   24,    4,    4,    4,   25,   25,
       25,   25,   25,   25,   28, 1146,   30,   31,   35,  984,
       39,   32,   29,  912,   33,   46,   34,   40,   36,   43,
     1510,   65,   41,  407,  407,   63,   44,   64,   37,   28,
       30,   45,   31,   38,   39,   32,   29,   42,   33,   46,

       34,   50,   40,   36,   43,   47,   65,   41,   48,   63,
       44,   64,   37,   49, 1504,   45, 1503,   38,   52,   66,
       68,   42,   53,   56,  505,  505,   51,   57, 1499,   67,
       47,   71,   54,   48,   55,   69, 1492,   58,   49,   25,
       25,   25,   59,   52,   66,   68,   60,   53,   56,   61,
       51,   70,   57,   67,   62,   71,   54,   72,   55,   73,
       69,   58,   74,   75, 1482,   76,   59,   77,   80, 1465,
       78,   60,   81,   82,   61,   85,   70,   79,   62,   83,
     1463,   72,   84,   73,   87,   88,   89,   74,   75,   76,
       90,   91,   77,   80,   78,   92,   81,   82,   93,   94,

       85,   79,   97,   98,   83,   99,   95,   84,   87,   88,
       89,   96,  100,  101,   90,   91,  102,  103,  104,   92,
      105,  106,   93,   94,  107,  110,   97,   98,  108,   99,
       95,  111,  112, 1437,  113,   96,  100,  101,  114,  116,
      102,  103,  115,  104,  105,  106,  117, 1436,  119,  107,
      110,  120,  108,  121,  122,  123,  111,  112,  113,  124,
      133,  125,  126,  114,  116,  127,  115,  128,  136,  511,
      511,  117,  119,  143,  134,  120,  137,  121,  122,  123,
      139,  140,  142,  144,  124,  125,  126,  129,  145,  127,
      146,  128,  147,  136,  130,  131,  148,  143,  132,  134,

      149,  137,  150,  151,  152,  139,  140,  142,  144,  153,
      155,  157,  129,  145,  146,  156,  158,  147,  159,  130,
      131,  148,  132,  160,  161,  149,  150,  151,  162,  152,
      164,  165,  167,  153,  168,  155,  157,  169,  170,  156,
      171,  158,  159,  172,  173,  174,  175,  160,  161,  176,
     1422,  177,  162,  178,  164,  165,  179,  167,  180,  168,
      182,  195,  169,  170,  171,  186,  181,  172,  173,  183,
      174,  175,  184,  201,  176,  177,  188,  178,  191,  192,
      189,  179,  193,  180,  182,  185,  195,  196,  197,  186,
      181,  190,  198,  199,  183,  203,  204,  184,  201,  205,

      206,  188,  191,  192,  207,  189,  193,  208,  210,  185,
      213,  196,  197,  214,  215,  190,  198,  199,  216,  203,
      204,  217,  226,  205,  221,  206,  222,  223,  207,  224,
      218,  208,  210,  225,  219,  213,  220,  214,  227,  215,
      228,  230,  216,  229,  231,  232,  217,  226,  221,  233,
      222,  223,  234,  224,  235,  218,  236,  225,  237,  219,
      240,  220,  227,  241,  245,  228,  230,  229,  231,  232,
      238,  242,  243,  233,  244,  239,  234,  246,  235,  247,
      248,  236,  259,  237,  257,  240, 1415,  258,  241,  245,
      260, 1414,  261, 1412,  238,  242,  243,  265,  244,  239,

      264,  246,  268, 1405,  247,  248,  249,  259,  257,  262,
      250,  258,  251,  263,  273,  260,  252,  261,  253,  269,
      254,  255,  265,  270,  264,  271,  272,  268,  256,  274,
      275,  249,  276,  284,  262,  250,  277,  251,  263,  273,
      252,  278,  253,  269,  254,  255,  279,  270,  280,  271,
      272,  281,  256,  274,  275,  283,  285,  276,  284,  287,
      277,  288,  289,  291,  293,  278,  292,  282,  294,  300,
      279,  295,  280,  296,  297,  298,  281,  299,  301,  283,
      285,  302,  304,  287,  303,  305,  288,  289,  291,  293,
      292,  282,  306,  294,  300,  295,  307,  296,  297,  298,

      309,  299,  310,  301,  311,  312,  302,  304,  303,  305,
      313,  314, 1400,  315,  316,  320,  306,  317,  321,  324,
      307,  323,  318,  326,  309,  319,  310,  327,  311,  328,
      312,  329,  330,  333,  313,  331,  314,  315,  332,  316,
      320,  334,  317,  321,  324,  323,  318,  326,  335,  319,
      336,  337,  327,  338,  328,  329,  339,  330,  333,  331,
      340,  341,  332,  344,  345,  346,  334,  347,  348,  350,
      352,  353,  355,  335,  354,  336,  337,  356,  338,  357,
      358,  339,  359,  360,  361,  340,  341,  344,  345,  346,
      363,  347,  348,  350,  364,  352,  353,  355,  354,  365,

      366,  371,  356,  357,  358,  368,  369,  359,  360,  361,
      370,  372,  373,  374,  377,  363,  375,  376,  364,  378,
      379,  380,  381,  365,  382,  366,  371, 1396,  385,  368,
      369,  387,  388,  390,  370,  372,  389,  373,  374,  377,
      375,  376,  391,  378,  383,  379,  380,  381,  392,  382,
      393,  384,  385,  394,  395,  387,  396,  388,  390,  397,
      389,  398, 1395,  399,  400,  403,  404,  391,  406,  383,
      408,  409,  392,  410,  393,  384,  411,  394,  395,  412,
      413,  396,  416,  414,  397,  417,  398,  399,  400,  403,
      404,  418,  406,  415,  419,  408,  409,  420,  410,  422,

      411,  423,  424,  412,  413,  425,  416,  414,  426,  427,
      417,  428,  429,  430,  431,  432,  418,  415,  419,  433,
      435,  436,  420,  422,  437,  423,  424,  438,  442,  425,
      441,  443,  426,  427,  444,  449,  428,  429,  430,  431,
      432,  446,  447,  448,  433,  435,  436,  450,  437,  451,
      452,  455,  438,  442,  441,  456,  443,  457,  453,  444,
      449,  458,  454,  459,  460,  446,  447,  448,  461,  462,
      463,  467,  450,  451,  464,  452,  455,  465,  466,  456,
      469,  471,  457,  453,  470,  458,  454,  472,  459,  460,
      479,  482,  461,  462,  480,  463,  467,  481,  464,  483,

      473,  465,  466,  484,  485,  469,  471,  474,  470,  477,
      478,  478,  472,  486,  479,  475,  482,  487,  480,  488,
      489,  481,  490,  483,  491,  473,  492,  484,  493,  485,
      494,  495,  474,  496, 1385,  497,  499,  501,  486,  475,
      502,  503,  487,  488,  504,  489,  506,  490,  491,  507,
      508,  492,  509,  493,  494,  510,  495,  512,  496,  497,
      499,  513,  501,  514,  502,  503,  515,  517,  504,  516,
      516,  506,  518,  507,  508,  519,  509,  520, 1373,  521,
      510,  512,  523,  524,  525,  513,  527,  514,  526, 1372,
      528,  515,  517,  529, 1351,  530,  518,  531,  532,  519,

      534,  535,  520,  521,  536,  538,  523,  524,  537,  525,
      540,  527,  541,  526,  528,  542,  543,  545,  529,  530,
      546,  531,  532,  547,  534,  535,  548,  549,  549,  536,
      538,  550,  537,  551,  540,  552,  541,  553,  560,  542,
      543,  545,  554,  555,  546,  477,  478,  478,  547,  556,
      548,  557,  558,  559,  561,  562,  550,  563,  551,  564,
      552,  566,  553,  560,  567,  568,  554,  555,  569,  569,
      570,  571,  572,  556,  573,  557,  558,  559,  561,  562,
      575,  563,  578,  564,  579,  580,  566,  581,  586,  567,
      568,  576,  577,  577,  570,  571,  572,  582,  585,  573,

      583,  584,  584,  587,  575,  591,  578,  594,  579,  580,
      596,  598,  581,  586,  589,  590,  590,  597,  599,  600,
      601,  582,  585,  602,  604,  605,  606,  607,  587,  591,
      608,  611,  594,  614,  615,  596,  598,  612,  620,  613,
      618,  597,  599,  600,  616,  601,  617,  602,  619,  604,
      605,  606,  607,  621,  608,  611,  622,  614,  615,  623,
      549,  549,  612,  620,  613,  618,  624,  625,  616,  626,
      617,  627,  628,  619,  629,  630,  631,  633,  621,  632,
      622,  634,  635,  623,  636, 1345,  637,  638,  639,  639,
      624,  625,  640,  626,  642,  627,  643,  628,  629,  630,

      644,  631,  633,  632,  646,  634,  647,  635,  648,  636,
      637,  650,  638,  569,  569,  651,  640,  653,  642,  649,
      649,  643,  576,  577,  577,  644,  654,  658,  646,  656,
      647,  655,  655,  648,  657,  650,  583,  584,  584,  661,
      651,  663,  653,  659,  659,  660,  660,  589,  590,  590,
      664,  654,  658,  656,  662,  662,  665,  665,  657,  666,
      667,  668,  669,  683,  661,  673,  663,  674,  675,  676,
      677,  678,  678,  679,  664,  681,  682,  685,  686,  687,
     1344,  688,  689,  666,  667,  668,  690,  669,  683,  673,
      691,  674,  675,  676,  677,  692,  695,  679,  693,  681,

      682,  685,  694,  686,  687,  688,  696,  689,  697,  698,
      690,  702,  704,  705,  706,  691,  707,  639,  639,  708,
      692,  695,  693,  709,  710,  711,  694,  712,  713,  714,
      696,  715,  697,  716,  698,  702,  704,  705,  706,  717,
      707,  649,  649,  708,  718,  719,  720,  709,  710,  721,
      711,  712,  713,  722,  714,  715,  655,  655,  716,  723,
      724,  725,  725,  726,  717,  660,  660,  729,  718,  719,
      730,  720,  733,  735,  721,  727,  728,  728,  722,  731,
      732,  732,  736,  723,  737,  738,  738,  739,  726,  740,
      741,  729,  742,  743,  744,  730,  745,  733,  735,  678,

      678,  746,  747,  748, 1340,  749,  736,  750,  750,  737,
      751,  739,  752,  740,  741,  753,  754,  742,  743,  744,
      755,  745,  757,  758,  760,  746,  747,  761,  748,  749,
      762, 1329,  763,  765,  751,  766,  752,  767,  768,  770,
      753,  754,  769,  771,  755,  772,  757,  758,  760,  773,
      774,  761,  776,  777,  785,  762,  763,  778,  765,  766,
      780,  781,  767,  768,  770,  782,  769,  784,  771,  772,
      786,  787,  788,  773,  789,  774,  776,  791,  777,  785,
     1306,  778,  790,  790,  780,  781,  724,  725,  725,  782,
      793,  784,  792,  792,  786,  787,  788,  794,  796,  789,

      799,  791,  727,  728,  728,  795,  795,  731,  732,  732,
      801,  797,  800,  802,  793,  798,  738,  738,  803,  804,
      809,  794,  796,  806,  799,  807,  808,  811,  812,  813,
      814,  814,  815,  816,  801,  797,  817,  800,  802,  798,
      818,  821,  803,  824,  804,  809,  827,  806,  828,  807,
      808,  811,  812,  819,  819,  829,  815,  830,  816,  831,
      817,  832, 1280,  835,  818,  837,  821,  824,  838,  838,
      827,  839,  828,  840,  842,  842,  843,  844,  846,  829,
      847,  830,  848,  831,  849,  851,  832,  835,  852,  837,
      790,  790,  853,  792,  792,  854,  839,  855,  840,  795,

      795,  843,  844,  846,  856,  847,  848,  857,  858,  849,
      851,  859,  852,  861,  863,  864,  866,  853,  865,  854,
      867,  868,  855,  869,  870,  870,  873,  873,  874,  856,
      877,  877,  857,  858,  878,  879,  859,  880,  861,  863,
      864,  866,  865,  881,  867,  882,  868,  883,  869,  813,
      814,  814,  874,  875,  876,  876,  884, 1279,  878,  885,
      879,  880,  886,  887,  888,  889,  890,  881,  891,  892,
      882,  893,  883,  838,  838,  894,  842,  842,  895,  896,
      898,  884,  899,  885,  897,  897,  886,  887,  888,  889,
      890,  900,  891,  892,  901,  893,  902,  902,  905,  894,

      906,  909,  895,  896,  898,  910,  899,  911,  913,  914,
      915,  916,  917,  918,  919,  900,  921,  870,  870,  901,
      922,  922,  905,  923,  906,  924,  909,  873,  873,  910,
      928,  911,  913,  914,  915,  916,  917,  918,  929,  919,
      921,  925,  925,  875,  876,  876,  930,  931,  923,  933,
      924,  926,  927,  927,  928,  934,  935,  937, 1275,  938,
      939,  940,  929,  945,  941,  897,  897,  948,  949,  951,
      930,  931,  942,  933,  952,  953,  953,  954,  955,  934,
      935,  956,  937,  938,  957,  939,  940,  958,  945,  941,
      959,  948,  949,  951,  960,  961,  962,  942,  963,  964,

      965,  954,  955,  966,  967,  969,  956,  968,  957,  970,
      973,  958,  971,  971,  974,  959,  922,  922,  960,  961,
      976,  962,  963,  964,  965,  925,  925,  978,  966,  967,
      969,  968,  979,  970,  973,  975,  975,  980,  974,  926,
      927,  927,  981,  985,  976,  982,  983,  986, 1269,  987,
      988,  989,  978,  990,  991,  992,  992,  979,  993,  994,
      995,  998,  980,  996,  999, 1000, 1000,  981,  985,  982,
      983, 1001,  986,  987,  988,  989, 1002,  990, 1004,  991,
     1005, 1008,  993, 1006,  994,  995,  998,  996, 1007,  999,
      952,  953,  953, 1009, 1011, 1013, 1001, 1012, 1014, 1015,

     1002, 1017, 1004,  971,  971, 1005, 1008, 1006, 1018, 1019,
     1020, 1022, 1007,  975,  975, 1023, 1024, 1009, 1025, 1011,
     1013, 1012, 1014, 1026, 1015, 1028, 1017, 1029, 1030, 1031,
     1034, 1037, 1018, 1019, 1020, 1022, 1035, 1036, 1036, 1023,
     1024, 1038, 1040, 1025, 1039, 1041, 1048, 1026, 1042, 1028,
     1043, 1029, 1030, 1031, 1034, 1044, 1037, 1000, 1000, 1045,
     1046, 1046, 1047, 1252, 1049, 1050, 1038, 1040, 1039, 1051,
     1041, 1048, 1042, 1052, 1043, 1053, 1054, 1054, 1055, 1044,
     1056, 1058, 1066, 1045, 1060, 1061, 1062, 1047, 1049, 1063,
     1050, 1067, 1070, 1051, 1068, 1069, 1071, 1052, 1072, 1073,

     1053, 1075, 1076, 1055, 1077, 1056, 1058, 1066, 1060, 1061,
     1062, 1079, 1079, 1063, 1080, 1081, 1067, 1070, 1068, 1069,
     1083, 1071, 1072, 1084, 1073, 1085, 1075, 1076, 1086, 1077,
     1035, 1036, 1036, 1087, 1088, 1089, 1090, 1090, 1080, 1091,
     1081, 1092, 1093, 1094, 1097, 1083, 1098, 1084, 1054, 1054,
     1085, 1100, 1086, 1101, 1102, 1102, 1103, 1087, 1105, 1088,
     1106, 1107, 1107, 1091, 1108, 1092, 1093, 1094, 1097, 1109,
     1110, 1098, 1111, 1112, 1113, 1119, 1100, 1101, 1114, 1115,
     1103, 1116, 1117, 1105, 1106, 1118, 1079, 1079, 1108, 1121,
     1122, 1240, 1123, 1109, 1110, 1124, 1111, 1112, 1125, 1113,

     1119, 1128, 1114, 1115, 1137, 1116, 1117, 1129, 1129, 1118,
     1089, 1090, 1090, 1121, 1138, 1122, 1123, 1134, 1134, 1124,
     1141, 1135, 1125, 1136, 1136, 1128, 1139, 1142, 1137, 1140,
     1143, 1144, 1144, 1145, 1147, 1223, 1148, 1151, 1158, 1138,
     1149, 1150, 1150, 1152, 1141, 1154, 1155, 1156, 1157, 1159,
     1139, 1160, 1142, 1140, 1161, 1162, 1162, 1145, 1163, 1147,
     1148, 1164, 1151, 1158, 1165, 1166, 1167, 1152, 1168, 1154,
     1155, 1156, 1157, 1170, 1159, 1171, 1160, 1218, 1161, 1169,
     1169, 1194, 1163, 1129, 1129, 1164, 1172, 1172, 1165, 1166,
     1177, 1167, 1168, 1173, 1173, 1174, 1174, 1178, 1170, 1179,

     1171, 1175, 1176, 1176, 1136, 1136, 1136, 1136, 1180, 1181,
     1182, 1183, 1183, 1184, 1185, 1177, 1143, 1144, 1144, 1186,
     1188, 1178, 1187, 1187, 1179, 1149, 1150, 1150, 1189, 1190,
     1193, 1192, 1180, 1181, 1182, 1195, 1196, 1197, 1184, 1185,
     1198, 1191, 1201, 1186, 1188, 1199, 1200, 1200, 1202, 1203,
     1153, 1204, 1205, 1189, 1190, 1192, 1206, 1133, 1209, 1195,
     1196, 1197, 1207, 1208, 1208, 1198, 1201, 1210, 1211, 1212,
     1212, 1217, 1217, 1202, 1203, 1204, 1205, 1213, 1214, 1214,
     1219, 1206, 1209, 1215, 1216, 1216, 1175, 1176, 1176, 1220,
     1221, 1210, 1222, 1183, 1183, 1224, 1225, 1187, 1187, 1226,

     1227, 1132, 1228, 1229, 1219, 1230, 1231, 1231, 1232, 1131,
     1235, 1236, 1237, 1238, 1220, 1221, 1222, 1241, 1233, 1234,
     1224, 1225, 1242, 1226, 1243, 1227, 1228, 1229, 1244, 1230,
     1239, 1239, 1245, 1232, 1235, 1236, 1237, 1238, 1199, 1200,
     1200, 1241, 1233, 1234, 1246, 1246, 1242, 1247, 1243, 1207,
     1208, 1208, 1248, 1244, 1249, 1249, 1245, 1211, 1212, 1212,
     1250, 1250, 1213, 1214, 1214, 1251, 1251, 1215, 1216, 1216,
     1253, 1247, 1217, 1217, 1254, 1255, 1257, 1248, 1256, 1256,
     1258, 1259, 1130, 1260, 1261, 1262, 1127, 1263, 1264, 1265,
     1265, 1266, 1267, 1270, 1253, 1268, 1271, 1272, 1274, 1254,

     1255, 1257, 1239, 1239, 1258, 1276, 1259, 1260, 1277, 1261,
     1262, 1263, 1273, 1273, 1278, 1266, 1282, 1267, 1270, 1268,
     1283, 1271, 1272, 1274, 1246, 1246, 1249, 1249, 1284, 1276,
     1250, 1250, 1277, 1251, 1251, 1281, 1281, 1287, 1288, 1278,
     1282, 1285, 1286, 1286, 1283, 1289, 1126, 1290, 1291, 1292,
     1292, 1293, 1295, 1284, 1264, 1265, 1265, 1294, 1296, 1297,
     1298, 1287, 1288, 1299, 1300, 1301, 1301, 1302, 1303, 1304,
     1289, 1290, 1291, 1305, 1307, 1307, 1293, 1295, 1308, 1308,
     1309, 1294, 1296, 1310, 1297, 1298, 1281, 1281, 1299, 1311,
     1312, 1312, 1302, 1303, 1304, 1313, 1314, 1305, 1285, 1286,

     1286, 1315, 1316, 1317, 1319, 1309, 1292, 1292, 1310, 1318,
     1320, 1321, 1322, 1311, 1323, 1120, 1324, 1325, 1325, 1326,
     1313, 1314, 1300, 1301, 1301, 1315, 1327, 1316, 1317, 1319,
     1328, 1330, 1335, 1318, 1320, 1336, 1321, 1322, 1337, 1323,
     1324, 1312, 1312, 1326, 1331, 1332, 1332, 1333, 1334, 1334,
     1327, 1338, 1339, 1342, 1328, 1330, 1335, 1341, 1343, 1336,
     1346, 1347, 1337, 1348, 1325, 1325, 1349, 1350, 1352, 1352,
     1353, 1354, 1354, 1355, 1355, 1338, 1104, 1339, 1342, 1356,
     1357, 1341, 1343, 1358, 1359, 1346, 1347, 1360, 1348, 1361,
     1362, 1349, 1350, 1363, 1364, 1353, 1331, 1332, 1332, 1333,

     1334, 1334, 1365, 1366, 1356, 1357, 1367, 1368, 1358, 1359,
     1369, 1360, 1371, 1361, 1374, 1362, 1375, 1363, 1376, 1364,
     1370, 1370, 1352, 1352, 1354, 1354, 1365, 1366, 1355, 1355,
     1367, 1368, 1377, 1379, 1369, 1378, 1371, 1380, 1374, 1381,
     1375, 1382, 1376, 1383, 1384, 1370, 1370, 1386, 1387, 1387,
     1388, 1388, 1389, 1390, 1099, 1391, 1392, 1377, 1379, 1378,
     1393, 1380, 1394, 1381, 1397, 1382, 1398, 1401, 1383, 1384,
     1402, 1386, 1399, 1399, 1387, 1387, 1403, 1389, 1390, 1391,
     1392, 1388, 1388, 1404, 1393, 1406, 1394, 1409, 1397, 1410,
     1398, 1401, 1407, 1407, 1402, 1408, 1408, 1399, 1399, 1411,

     1403, 1413, 1416, 1417, 1407, 1407, 1408, 1408, 1404, 1406,
     1418, 1419, 1409, 1420, 1410, 1421, 1423, 1423, 1424, 1424,
     1425, 1426, 1096, 1427, 1411, 1413, 1416, 1428, 1417, 1429,
     1095, 1430, 1431, 1434, 1418, 1419, 1435, 1420, 1423, 1423,
     1421, 1432, 1433, 1433, 1438, 1425, 1426, 1427, 1439, 1082,
     1440, 1428, 1441, 1441, 1429, 1430, 1442, 1431, 1434, 1443,
     1435, 1432, 1433, 1433, 1444, 1444, 1445, 1445, 1438, 1446,
     1447, 1448, 1449, 1439, 1440, 1441, 1441, 1450, 1455, 1462,
     1442, 1456, 1457, 1443, 1451, 1452, 1452, 1453, 1454, 1454,
     1458, 1459, 1464, 1446, 1447, 1448, 1449, 1460, 1460, 1451,

     1452, 1452, 1450, 1455, 1462, 1456, 1457, 1461, 1461, 1453,
     1454, 1454, 1460, 1460, 1458, 1459, 1464, 1461, 1461, 1466,
     1467, 1078, 1468, 1469, 1470, 1074, 1471, 1472, 1473, 1064,
     1474, 1475, 1476, 1059, 1477, 1478, 1479, 1480, 1481, 1483,
     1057, 1484, 1033, 1487, 1466, 1467, 1468, 1469, 1485, 1470,
     1471, 1472, 1488, 1473, 1474, 1489, 1475, 1476, 1477, 1478,
     1479, 1480, 1490, 1481, 1483, 1484, 1486, 1487, 1491, 1493,
     1032, 1494, 1495, 1485, 1496, 1497, 1498, 1488, 1500, 1489,
     1501, 1502, 1502, 1502, 1502, 1505, 1505, 1490, 1506, 1507,
     1486, 1505, 1505, 1491, 1493, 1494, 1508, 1495, 1496, 1497,

     1498, 1509, 1500, 1511, 1511, 1501, 1511, 1511, 1027, 1021,
     1016, 1010, 1506, 1003, 1507,  997,  977,  972,  950,  947,
      946, 1508,  944,  943,  936, 1509,   26,   26,   26,  822,
      822, 1065, 1065,  932,  920,  908,  907,  904,  903,  872,
      871,  862,  860,  850,  845,  841,  836,  834,  833,  826,
      825,  823,  820,  810,  805,  783,  779,  775,  764,  759,
      756,  734,  703,  701,  700,  699,  684,  680,  672,  671,
      670,  652,  645,  641,  610,  609,  603,  595,  593,  592,
      588,  574,  565,  544,  539,  533,  522,  500,  498,  476,
      468,  445,  440,  439,  434,  421,  405,  402,  401,  386,

      367,  362,  351,  349,  343,  342,  325,  322,  308,  290,
      286,  267,  266,  212,  211,  209,  202,  200,  194,  187,
      166,  163,  154,  141,  138,  135,  118,  109,   86,   27,
       27, 1512,    3, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512

    } ;

static yyconst flex_int16_t yy_chk[3092] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    6,    6,    6,    8, 1518,    9,   10,   11, 1516,
       12,   10,    8, 1515,   10,   16,   10,   13,   11,   15,
     1509,   24,   14,  342,  342,   22,   15,   23,   11,    8,
        9,   15,   10,   11,   12,   10,    8,   14,   10,   16,

       10,   18,   13,   11,   15,   17,   24,   14,   17,   22,
       15,   23,   11,   17, 1501,   15, 1500,   11,   19,   28,
       30,   14,   19,   20,  434,  434,   18,   20, 1496,   29,
       17,   33,   19,   17,   19,   31, 1489,   20,   17,   25,
       25,   25,   20,   19,   28,   30,   21,   19,   20,   21,
       18,   32,   20,   29,   21,   33,   19,   34,   19,   35,
       31,   20,   36,   37, 1478,   38,   20,   39,   41, 1458,
       40,   21,   42,   43,   21,   45,   32,   40,   21,   44,
     1456,   34,   44,   35,   47,   48,   49,   36,   37,   38,
       50,   51,   39,   41,   40,   52,   42,   43,   53,   54,

       45,   40,   56,   57,   44,   57,   55,   44,   47,   48,
       49,   55,   58,   59,   50,   51,   60,   61,   62,   52,
       63,   63,   53,   54,   64,   67,   56,   57,   65,   57,
       55,   68,   69, 1428,   70,   55,   58,   59,   71,   73,
       60,   61,   72,   62,   63,   63,   74, 1427,   76,   64,
       67,   77,   65,   78,   79,   80,   68,   69,   70,   81,
       87,   82,   83,   71,   73,   84,   72,   85,   89,  440,
      440,   74,   76,   96,   87,   77,   90,   78,   79,   80,
       92,   93,   95,   97,   81,   82,   83,   86,   98,   84,
       99,   85,  100,   89,   86,   86,  101,   96,   86,   87,

      102,   90,  103,  104,  105,   92,   93,   95,   97,  106,
      108,  110,   86,   98,   99,  109,  111,  100,  112,   86,
       86,  101,   86,  113,  114,  102,  103,  104,  115,  105,
      117,  118,  120,  106,  121,  108,  110,  122,  123,  109,
      124,  111,  112,  125,  126,  127,  128,  113,  114,  129,
     1413,  130,  115,  131,  117,  118,  132,  120,  133,  121,
      134,  143,  122,  123,  124,  136,  133,  125,  126,  135,
      127,  128,  135,  149,  129,  130,  138,  131,  139,  140,
      138,  132,  141,  133,  134,  135,  143,  144,  145,  136,
      133,  138,  146,  147,  135,  151,  152,  135,  149,  153,

      154,  138,  139,  140,  155,  138,  141,  156,  158,  135,
      161,  144,  145,  162,  163,  138,  146,  147,  164,  151,
      152,  165,  172,  153,  167,  154,  168,  169,  155,  170,
      166,  156,  158,  171,  166,  161,  166,  162,  173,  163,
      174,  176,  164,  175,  177,  178,  165,  172,  167,  179,
      168,  169,  180,  170,  181,  166,  182,  171,  183,  166,
      185,  166,  173,  186,  190,  174,  176,  175,  177,  178,
      184,  187,  188,  179,  189,  184,  180,  191,  181,  192,
      193,  182,  197,  183,  195,  185, 1404,  196,  186,  190,
      198, 1403,  199, 1401,  184,  187,  188,  202,  189,  184,

      201,  191,  205, 1393,  192,  193,  194,  197,  195,  200,
      194,  196,  194,  200,  210,  198,  194,  199,  194,  206,
      194,  194,  202,  207,  201,  208,  209,  205,  194,  211,
      212,  194,  213,  220,  200,  194,  214,  194,  200,  210,
      194,  215,  194,  206,  194,  194,  216,  207,  217,  208,
      209,  218,  194,  211,  212,  219,  221,  213,  220,  223,
      214,  224,  225,  227,  229,  215,  228,  218,  231,  238,
      216,  232,  217,  234,  235,  236,  218,  237,  239,  219,
      221,  240,  242,  223,  241,  243,  224,  225,  227,  229,
      228,  218,  244,  231,  238,  232,  245,  234,  235,  236,

      247,  237,  248,  239,  249,  250,  240,  242,  241,  243,
      251,  252, 1386,  253,  254,  256,  244,  255,  257,  260,
      245,  259,  255,  262,  247,  255,  248,  263,  249,  264,
      250,  265,  266,  269,  251,  267,  252,  253,  268,  254,
      256,  270,  255,  257,  260,  259,  255,  262,  271,  255,
      272,  273,  263,  274,  264,  265,  275,  266,  269,  267,
      276,  277,  268,  280,  281,  282,  270,  283,  284,  286,
      288,  289,  291,  271,  290,  272,  273,  292,  274,  293,
      294,  275,  295,  296,  297,  276,  277,  280,  281,  282,
      299,  283,  284,  286,  300,  288,  289,  291,  290,  301,

      302,  307,  292,  293,  294,  304,  305,  295,  296,  297,
      306,  308,  309,  310,  313,  299,  311,  312,  300,  314,
      315,  316,  317,  301,  318,  302,  307, 1382,  320,  304,
      305,  322,  323,  325,  306,  308,  324,  309,  310,  313,
      311,  312,  326,  314,  319,  315,  316,  317,  327,  318,
      328,  319,  320,  329,  330,  322,  331,  323,  325,  332,
      324,  333, 1381,  334,  335,  338,  339,  326,  341,  319,
      343,  344,  327,  345,  328,  319,  346,  329,  330,  347,
      348,  331,  350,  349,  332,  351,  333,  334,  335,  338,
      339,  352,  341,  349,  353,  343,  344,  354,  345,  356,

      346,  357,  358,  347,  348,  359,  350,  349,  360,  361,
      351,  362,  363,  364,  365,  366,  352,  349,  353,  367,
      369,  370,  354,  356,  371,  357,  358,  372,  376,  359,
      375,  377,  360,  361,  378,  383,  362,  363,  364,  365,
      366,  380,  381,  382,  367,  369,  370,  384,  371,  385,
      386,  387,  372,  376,  375,  388,  377,  389,  386,  378,
      383,  390,  386,  391,  392,  380,  381,  382,  393,  394,
      395,  399,  384,  385,  396,  386,  387,  397,  398,  388,
      401,  403,  389,  386,  402,  390,  386,  404,  391,  392,
      408,  411,  393,  394,  409,  395,  399,  410,  396,  412,

      405,  397,  398,  413,  414,  401,  403,  405,  402,  407,
      407,  407,  404,  415,  408,  405,  411,  416,  409,  417,
      418,  410,  419,  412,  420,  405,  421,  413,  422,  414,
      423,  424,  405,  425, 1369,  426,  428,  430,  415,  405,
      431,  432,  416,  417,  433,  418,  435,  419,  420,  436,
      437,  421,  438,  422,  423,  439,  424,  441,  425,  426,
      428,  442,  430,  443,  431,  432,  444,  446,  433,  445,
      445,  435,  447,  436,  437,  448,  438,  449, 1357,  450,
      439,  441,  452,  453,  454,  442,  455,  443,  454, 1356,
      456,  444,  446,  457, 1328,  458,  447,  459,  460,  448,

      462,  463,  449,  450,  464,  466,  452,  453,  465,  454,
      468,  455,  469,  454,  456,  470,  471,  473,  457,  458,
      474,  459,  460,  475,  462,  463,  476,  477,  477,  464,
      466,  479,  465,  480,  468,  481,  469,  482,  489,  470,
      471,  473,  483,  484,  474,  478,  478,  478,  475,  485,
      476,  486,  487,  488,  490,  491,  479,  492,  480,  493,
      481,  495,  482,  489,  496,  497,  483,  484,  498,  498,
      499,  500,  501,  485,  502,  486,  487,  488,  490,  491,
      504,  492,  506,  493,  507,  508,  495,  509,  513,  496,
      497,  505,  505,  505,  499,  500,  501,  510,  512,  502,

      511,  511,  511,  514,  504,  517,  506,  520,  507,  508,
      522,  524,  509,  513,  516,  516,  516,  523,  525,  526,
      527,  510,  512,  528,  530,  531,  532,  533,  514,  517,
      534,  538,  520,  540,  541,  522,  524,  539,  545,  539,
      544,  523,  525,  526,  542,  527,  543,  528,  544,  530,
      531,  532,  533,  546,  534,  538,  547,  540,  541,  548,
      549,  549,  539,  545,  539,  544,  550,  551,  542,  552,
      543,  553,  554,  544,  555,  556,  557,  559,  546,  558,
      547,  560,  561,  548,  562, 1321,  563,  564,  565,  565,
      550,  551,  566,  552,  568,  553,  570,  554,  555,  556,

      571,  557,  559,  558,  573,  560,  574,  561,  575,  562,
      563,  578,  564,  569,  569,  579,  566,  581,  568,  576,
      576,  570,  577,  577,  577,  571,  582,  587,  573,  585,
      574,  583,  583,  575,  586,  578,  584,  584,  584,  591,
      579,  593,  581,  588,  588,  589,  589,  590,  590,  590,
      594,  582,  587,  585,  592,  592,  595,  595,  586,  596,
      597,  598,  599,  614,  591,  603,  593,  604,  605,  606,
      607,  609,  609,  610,  594,  612,  613,  616,  617,  618,
     1320,  619,  620,  596,  597,  598,  621,  599,  614,  603,
      622,  604,  605,  606,  607,  623,  626,  610,  624,  612,

      613,  616,  625,  617,  618,  619,  627,  620,  628,  629,
      621,  633,  635,  636,  637,  622,  638,  639,  639,  641,
      623,  626,  624,  642,  643,  644,  625,  645,  646,  647,
      627,  648,  628,  650,  629,  633,  635,  636,  637,  651,
      638,  649,  649,  641,  652,  653,  654,  642,  643,  656,
      644,  645,  646,  657,  647,  648,  655,  655,  650,  658,
      659,  659,  659,  661,  651,  660,  660,  663,  652,  653,
      664,  654,  666,  668,  656,  662,  662,  662,  657,  665,
      665,  665,  669,  658,  670,  671,  671,  672,  661,  673,
      674,  663,  675,  676,  677,  664,  679,  666,  668,  678,

      678,  680,  681,  682, 1316,  683,  669,  684,  684,  670,
      685,  672,  686,  673,  674,  687,  688,  675,  676,  677,
      689,  679,  691,  692,  694,  680,  681,  695,  682,  683,
      696, 1305,  697,  699,  685,  700,  686,  701,  702,  704,
      687,  688,  703,  705,  689,  706,  691,  692,  694,  707,
      708,  695,  710,  711,  719,  696,  697,  712,  699,  700,
      714,  715,  701,  702,  704,  716,  703,  718,  705,  706,
      720,  721,  722,  707,  723,  708,  710,  726,  711,  719,
     1278,  712,  724,  724,  714,  715,  725,  725,  725,  716,
      729,  718,  727,  727,  720,  721,  722,  730,  733,  723,

      735,  726,  728,  728,  728,  731,  731,  732,  732,  732,
      737,  734,  736,  739,  729,  734,  738,  738,  740,  741,
      746,  730,  733,  743,  735,  744,  745,  748,  749,  750,
      750,  750,  751,  752,  737,  734,  754,  736,  739,  734,
      755,  758,  740,  761,  741,  746,  764,  743,  765,  744,
      745,  748,  749,  756,  756,  766,  751,  767,  752,  768,
      754,  769, 1248,  772,  755,  774,  758,  761,  775,  775,
      764,  776,  765,  777,  779,  779,  780,  781,  783,  766,
      784,  767,  785,  768,  786,  788,  769,  772,  789,  774,
      790,  790,  791,  792,  792,  793,  776,  794,  777,  795,

      795,  780,  781,  783,  796,  784,  785,  797,  798,  786,
      788,  799,  789,  801,  803,  804,  806,  791,  805,  793,
      807,  808,  794,  809,  810,  810,  813,  813,  818,  796,
      820,  820,  797,  798,  821,  823,  799,  825,  801,  803,
      804,  806,  805,  826,  807,  827,  808,  828,  809,  814,
      814,  814,  818,  819,  819,  819,  829, 1247,  821,  830,
      823,  825,  831,  832,  833,  834,  835,  826,  836,  839,
      827,  840,  828,  838,  838,  841,  842,  842,  843,  844,
      846,  829,  847,  830,  845,  845,  831,  832,  833,  834,
      835,  848,  836,  839,  849,  840,  850,  850,  853,  841,

      854,  857,  843,  844,  846,  858,  847,  859,  861,  862,
      863,  864,  865,  866,  867,  848,  869,  870,  870,  849,
      871,  871,  853,  872,  854,  874,  857,  873,  873,  858,
      878,  859,  861,  862,  863,  864,  865,  866,  879,  867,
      869,  875,  875,  876,  876,  876,  880,  881,  872,  883,
      874,  877,  877,  877,  878,  884,  885,  887, 1242,  888,
      889,  890,  879,  894,  891,  897,  897,  898,  899,  901,
      880,  881,  891,  883,  902,  902,  902,  903,  904,  884,
      885,  905,  887,  888,  906,  889,  890,  907,  894,  891,
      908,  898,  899,  901,  908,  909,  910,  891,  911,  913,

      914,  903,  904,  915,  916,  918,  905,  917,  906,  919,
      923,  907,  920,  920,  924,  908,  922,  922,  908,  909,
      928,  910,  911,  913,  914,  925,  925,  930,  915,  916,
      918,  917,  931,  919,  923,  926,  926,  932,  924,  927,
      927,  927,  933,  937,  928,  934,  935,  938, 1235,  939,
      940,  941,  930,  942,  943,  944,  944,  931,  945,  946,
      947,  950,  932,  948,  951,  952,  952,  933,  937,  934,
      935,  954,  938,  939,  940,  941,  955,  942,  957,  943,
      958,  961,  945,  959,  946,  947,  950,  948,  960,  951,
      953,  953,  953,  962,  964,  966,  954,  965,  967,  968,

      955,  970,  957,  971,  971,  958,  961,  959,  972,  973,
      974,  977,  960,  975,  975,  978,  979,  962,  980,  964,
      966,  965,  967,  981,  968,  983,  970,  985,  986,  987,
      991,  993,  972,  973,  974,  977,  992,  992,  992,  978,
      979,  994,  996,  980,  995,  997, 1004,  981,  998,  983,
      999,  985,  986,  987,  991, 1001,  993, 1000, 1000, 1002,
     1003, 1003, 1003, 1219, 1005, 1006,  994,  996,  995, 1007,
      997, 1004,  998, 1008,  999, 1009, 1010, 1010, 1011, 1001,
     1012, 1014, 1022, 1002, 1016, 1017, 1018, 1003, 1005, 1019,
     1006, 1023, 1026, 1007, 1024, 1025, 1027, 1008, 1028, 1029,

     1009, 1031, 1032, 1011, 1033, 1012, 1014, 1022, 1016, 1017,
     1018, 1035, 1035, 1019, 1037, 1038, 1023, 1026, 1024, 1025,
     1040, 1027, 1028, 1041, 1029, 1042, 1031, 1032, 1043, 1033,
     1036, 1036, 1036, 1044, 1045, 1046, 1046, 1046, 1037, 1047,
     1038, 1048, 1049, 1050, 1053, 1040, 1055, 1041, 1054, 1054,
     1042, 1057, 1043, 1058, 1059, 1059, 1060, 1044, 1062, 1045,
     1063, 1064, 1064, 1047, 1066, 1048, 1049, 1050, 1053, 1067,
     1069, 1055, 1070, 1071, 1072, 1078, 1057, 1058, 1073, 1074,
     1060, 1075, 1076, 1062, 1063, 1077, 1079, 1079, 1066, 1081,
     1082, 1201, 1083, 1067, 1069, 1084, 1070, 1071, 1085, 1072,

     1078, 1088, 1073, 1074, 1097, 1075, 1076, 1089, 1089, 1077,
     1090, 1090, 1090, 1081, 1098, 1082, 1083, 1095, 1095, 1084,
     1100, 1096, 1085, 1096, 1096, 1088, 1099, 1101, 1097, 1099,
     1102, 1102, 1102, 1103, 1105, 1184, 1106, 1108, 1115, 1098,
     1107, 1107, 1107, 1109, 1100, 1111, 1112, 1113, 1114, 1117,
     1099, 1118, 1101, 1099, 1119, 1120, 1120, 1103, 1121, 1105,
     1106, 1122, 1108, 1115, 1123, 1124, 1125, 1109, 1126, 1111,
     1112, 1113, 1114, 1128, 1117, 1130, 1118, 1177, 1119, 1127,
     1127, 1157, 1121, 1129, 1129, 1122, 1131, 1131, 1123, 1124,
     1137, 1125, 1126, 1132, 1132, 1133, 1133, 1138, 1128, 1139,

     1130, 1134, 1134, 1134, 1135, 1135, 1136, 1136, 1140, 1141,
     1142, 1143, 1143, 1145, 1147, 1137, 1144, 1144, 1144, 1148,
     1151, 1138, 1149, 1149, 1139, 1150, 1150, 1150, 1152, 1153,
     1156, 1155, 1140, 1141, 1142, 1158, 1159, 1160, 1145, 1147,
     1161, 1154, 1163, 1148, 1151, 1162, 1162, 1162, 1164, 1165,
     1110, 1166, 1167, 1152, 1153, 1155, 1168, 1094, 1170, 1158,
     1159, 1160, 1169, 1169, 1169, 1161, 1163, 1171, 1172, 1172,
     1172, 1175, 1175, 1164, 1165, 1166, 1167, 1173, 1173, 1173,
     1178, 1168, 1170, 1174, 1174, 1174, 1176, 1176, 1176, 1179,
     1180, 1171, 1181, 1183, 1183, 1185, 1186, 1187, 1187, 1188,

     1189, 1093, 1190, 1191, 1178, 1192, 1193, 1193, 1194, 1092,
     1195, 1196, 1197, 1198, 1179, 1180, 1181, 1202, 1194, 1194,
     1185, 1186, 1203, 1188, 1204, 1189, 1190, 1191, 1205, 1192,
     1199, 1199, 1206, 1194, 1195, 1196, 1197, 1198, 1200, 1200,
     1200, 1202, 1194, 1194, 1207, 1207, 1203, 1209, 1204, 1208,
     1208, 1208, 1210, 1205, 1211, 1211, 1206, 1212, 1212, 1212,
     1213, 1213, 1214, 1214, 1214, 1215, 1215, 1216, 1216, 1216,
     1220, 1209, 1217, 1217, 1221, 1222, 1224, 1210, 1223, 1223,
     1225, 1226, 1091, 1227, 1228, 1229, 1087, 1230, 1231, 1231,
     1231, 1232, 1233, 1236, 1220, 1234, 1237, 1238, 1241, 1221,

     1222, 1224, 1239, 1239, 1225, 1243, 1226, 1227, 1244, 1228,
     1229, 1230, 1240, 1240, 1245, 1232, 1253, 1233, 1236, 1234,
     1254, 1237, 1238, 1241, 1246, 1246, 1249, 1249, 1255, 1243,
     1250, 1250, 1244, 1251, 1251, 1252, 1252, 1257, 1259, 1245,
     1253, 1256, 1256, 1256, 1254, 1261, 1086, 1262, 1263, 1264,
     1264, 1266, 1268, 1255, 1265, 1265, 1265, 1267, 1269, 1270,
     1271, 1257, 1259, 1272, 1273, 1273, 1273, 1274, 1275, 1276,
     1261, 1262, 1263, 1277, 1279, 1279, 1266, 1268, 1280, 1280,
     1282, 1267, 1269, 1283, 1270, 1271, 1281, 1281, 1272, 1284,
     1285, 1285, 1274, 1275, 1276, 1287, 1288, 1277, 1286, 1286,

     1286, 1289, 1290, 1291, 1294, 1282, 1292, 1292, 1283, 1293,
     1295, 1296, 1297, 1284, 1298, 1080, 1299, 1300, 1300, 1302,
     1287, 1288, 1301, 1301, 1301, 1289, 1303, 1290, 1291, 1294,
     1304, 1306, 1309, 1293, 1295, 1310, 1296, 1297, 1311, 1298,
     1299, 1312, 1312, 1302, 1307, 1307, 1307, 1308, 1308, 1308,
     1303, 1313, 1315, 1318, 1304, 1306, 1309, 1317, 1319, 1310,
     1322, 1323, 1311, 1324, 1325, 1325, 1326, 1327, 1329, 1329,
     1330, 1331, 1331, 1333, 1333, 1313, 1061, 1315, 1318, 1335,
     1336, 1317, 1319, 1337, 1339, 1322, 1323, 1340, 1324, 1342,
     1343, 1326, 1327, 1344, 1345, 1330, 1332, 1332, 1332, 1334,

     1334, 1334, 1346, 1347, 1335, 1336, 1348, 1349, 1337, 1339,
     1350, 1340, 1353, 1342, 1358, 1343, 1359, 1344, 1360, 1345,
     1351, 1351, 1352, 1352, 1354, 1354, 1346, 1347, 1355, 1355,
     1348, 1349, 1361, 1363, 1350, 1362, 1353, 1364, 1358, 1365,
     1359, 1366, 1360, 1367, 1368, 1370, 1370, 1371, 1372, 1372,
     1373, 1373, 1375, 1376, 1056, 1377, 1378, 1361, 1363, 1362,
     1379, 1364, 1380, 1365, 1383, 1366, 1384, 1389, 1367, 1368,
     1390, 1371, 1385, 1385, 1387, 1387, 1391, 1375, 1376, 1377,
     1378, 1388, 1388, 1392, 1379, 1394, 1380, 1397, 1383, 1398,
     1384, 1389, 1395, 1395, 1390, 1396, 1396, 1399, 1399, 1400,

     1391, 1402, 1405, 1406, 1407, 1407, 1408, 1408, 1392, 1394,
     1409, 1410, 1397, 1411, 1398, 1412, 1414, 1414, 1415, 1415,
     1416, 1417, 1052, 1418, 1400, 1402, 1405, 1419, 1406, 1420,
     1051, 1421, 1422, 1425, 1409, 1410, 1426, 1411, 1423, 1423,
     1412, 1424, 1424, 1424, 1429, 1416, 1417, 1418, 1430, 1039,
     1431, 1419, 1432, 1432, 1420, 1421, 1434, 1422, 1425, 1435,
     1426, 1433, 1433, 1433, 1436, 1436, 1437, 1437, 1429, 1438,
     1439, 1440, 1442, 1430, 1431, 1441, 1441, 1443, 1446, 1455,
     1434, 1447, 1448, 1435, 1444, 1444, 1444, 1445, 1445, 1445,
     1449, 1450, 1457, 1438, 1439, 1440, 1442, 1451, 1451, 1452,

     1452, 1452, 1443, 1446, 1455, 1447, 1448, 1453, 1453, 1454,
     1454, 1454, 1460, 1460, 1449, 1450, 1457, 1461, 1461, 1462,
     1463, 1034, 1464, 1465, 1466, 1030, 1467, 1468, 1469, 1020,
     1470, 1471, 1472, 1015, 1473, 1474, 1475, 1476, 1477, 1479,
     1013, 1481,  990, 1483, 1462, 1463, 1464, 1465, 1482, 1466,
     1467, 1468, 1484, 1469, 1470, 1485, 1471, 1472, 1473, 1474,
     1475, 1476, 1486, 1477, 1479, 1481, 1482, 1483, 1487, 1490,
      989, 1491, 1492, 1482, 1493, 1494, 1495, 1484, 1497, 1485,
     1498, 1499, 1499, 1502, 1502, 1503, 1503, 1486, 1504, 1506,
     1482, 1505, 1505, 1487, 1490, 1491, 1507, 1492, 1493, 1494,

     1495, 1508, 1497, 1510, 1510, 1498, 1511, 1511,  982,  976,
      969,  963, 1504,  956, 1506,  949,  929,  921,  900,  896,
      895, 1507,  893,  892,  886, 1508, 1513, 1513, 1513, 1514,
     1514, 1517, 1517,  882,  868,  856,  855,  852,  851,  812,
      811,  802,  800,  787,  782,  778,  773,  771,  770,  763,
      762,  760,  757,  747,  742,  717,  713,  709,  698,  693,
      690,  667,  634,  632,  631,  630,  615,  611,  602,  601,
      600,  580,  572,  567,  537,  536,  529,  521,  519,  518,
      515,  503,  494,  472,  467,  461,  451,  429,  427,  406,
      400,  379,  374,  373,  368,  355,  340,  337,  336,  321,

      303,  298,  287,  285,  279,  278,  261,  258,  246,  226,
      222,  204,  203,  160,  159,  157,  150,  148,  142,  137,
      119,  116,  107,   94,   91,   88,   75,   66,   46,   26,
        7,    3, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex_conf.l"
#line 2 "lex_conf.l"
#include <math.h>
#include <ctype.h>
#include <stdlib.h>

#include "configManagement.h"
#include "attributesInfo.h"
#include "random.h"
#include "messageBuffer.h"

char *charFilter(char *string);
extern configManagement cm;
extern attributesInfo ai;
extern Random rnd;
extern messageBuffer mb;


#line 1659 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 23 "lex_conf.l"


#line 1849 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1513 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3033 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 25 "lex_conf.l"
{
/*	int atributs=atoi(charFilter(yytext));
	ai.setNumAttributes(atributs);
	mb.printf("Number of attributes in domain:%d\n"
		,atoi(charFilter(yytext)));*/
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_CROSSOVER);
	mb.printf("Crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),POP_SIZE);
	mb.printf("Popsize: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),ITERATIONS);
	mb.printf("GA Iterations:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MIN_CLASSIFIERS);
	mb.printf("Minumum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MAX_CLASSIFIERS);
	mb.printf("Maximum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lex_conf.l"
{
	cm.setParameter(1,IGNORE_MISSING_VALUES);
	mb.printf("Ignore missing values\n");
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "lex_conf.l"
{
	cm.setParameter(1,DUMP_EVOLUTION_STATS);
	mb.printf("Dump learning process statistics at each iteration\n");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "lex_conf.l"
{
	if(!strcasecmp(yytext+20,"TOURNAMENT")) {
		cm.setParameter(TOURNAMENT_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection Algorithm\n");
	} else if(!strcasecmp(yytext+20,"TOURNAMENTWOR")) {
		cm.setParameter(TOURNAMENT_WOR_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection without replacement Algorithm\n");
	} else if(!strcasecmp(yytext+20,"PARETO")) {
		cm.setParameter(PARETO_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Pareto Selection Algorithm\n");
	} else {
		mb.printf("Unknown selection algorithm:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),TOURNAMENT_SIZE);
	mb.printf("Tournament size:%f\n",atof(charFilter(yytext)));
}										
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 91 "lex_conf.l"
{
	cm.setParameter(1,SHOW_FRONTS);
	mb.printf("Show Pareto Fronts\n");
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "lex_conf.l"
{
	if(!strcasecmp(&yytext[19],"1PX")) {
		cm.setParameter(CROSS_1P,CROSSOVER_OPERATOR);
		mb.printf("One Point Crossover\n");
	} else if(!strcasecmp(&yytext[19],"2PX")) {
		cm.setParameter(CROSS_2P,CROSSOVER_OPERATOR);
		mb.printf("Two Points Crossover\n");
	} else if(!strcasecmp(&yytext[19],"INFORMED")) {
		cm.setParameter(CROSS_INFORMED,CROSSOVER_OPERATOR);
		mb.printf("Informed Crossover\n");
	} else {
		mb.printf("Unknown crossover operator:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "lex_conf.l"
{
	if(!strcasecmp(yytext+17,"ACCURACY")) {
		cm.setParameter(MAXIMIZE,MAX_MIN);
		cm.setParameter(ACCURACY,FITNESS_FUNCTION);
		mb.printf("Squared accuracy fitness function\n");
	} else if(!strcasecmp(yytext+17,"MDL")) {
		cm.setParameter(MINIMIZE,MAX_MIN);
		cm.setParameter(MDL,FITNESS_FUNCTION);
		mb.printf("MDL fitness function\n");
	} else {
		mb.printf("Unknown fitness function:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT);
	mb.printf("MDL fixed weight %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT_RELAX_FACTOR);
	mb.printf("MDL Weight relax factor %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MDL_INITIAL_TL_RATIO);
	mb.printf("Initial theory length proportion in MDL formula: %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MDL_ITERATION);
	mb.printf("Iteracio activacio MDL %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_ITERATION);
	mb.printf("Pruning operator activated at iteration:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 153 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_MIN_CLASSIFIERS);
	mb.printf("Pruning stops if #classifiers is less that %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD);
	mb.printf("The number of min classifiers is automatically set\n");
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 162 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD2);
	mb.printf("The number of min classifiers is automatically set2\n");
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 167 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PRUNING_AUTO_OFFSET);
	mb.printf("The min classifiers offset %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_INDIVIDUAL_MUTATION);
	mb.printf("Individual-wise mutation probability:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 177 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,HIERARCHICAL_SELECTION_ITERATION);
	mb.printf("Hierarchical selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 183 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),HIERARCHICAL_SELECTION_THRESHOLD);
	mb.printf("Hierarchical selection threshold :%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 189 "lex_conf.l"
{
	cm.setParameter(1,HIERARCHICAL_SELECTION_USES_MDL);
	mb.printf("Hierarchical selection uses MDL Theory Length\n");
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 194 "lex_conf.l"
{
	cm.setParameter(1,CHECK_WINDOWING);
	mb.printf("Performance tests of windowing enabled");
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 199 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_ILAS);
	mb.printf("ILAS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 204 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_GWS);
	mb.printf("GWS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 210 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_ONE);
	mb.printf("Probability of value ONE for GABIL and ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 216 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SHARP);
	mb.printf("Probability of value Sharp for LCS/Instances KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 222 "lex_conf.l"
{
	cm.setParameter(1,KR_ADI);
	mb.printf("Using Adaptive Discretization Intervals Knowledge Representation\n");
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 227 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_MERGE);
	mb.printf("Probability of merge operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 233 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_SPLIT);
	mb.printf("Probability of split operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 239 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE);
	mb.printf("Probability of reinitialize operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 245 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE_AT_END);
	mb.printf("Probability of reinitialize operator at final iteration in ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 251 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MAX_INTERVALS);
	mb.printf("Maximum number of intervals per attribute in ADI KR:%d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 257 "lex_conf.l"
{
	cm.setParameter(1,KR_HYPERRECT);
	mb.printf("Using HYPERRECT Knowledge Representation\n");
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 262 "lex_conf.l"
{
	cm.setParameter(1,KR_LCS);
	mb.printf("Using LCS Knowledge Representation\n");
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 267 "lex_conf.l"
{
	cm.setParameter(1,KR_INSTANCE_SET);
	mb.printf("Using Instance Set/1-NN Knowledge Representation\n");
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 272 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,ALPHA_OF_BLX);
	mb.printf("Using BLX crossover with alpha:%f\n" 
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 278 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,D_OF_FR);
	mb.printf("Using FR crossover with D:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 283 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,N_OF_SBX);
	mb.printf("Using SBX crossover with N:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "lex_conf.l"
{
	rnd.setSeed((unsigned long int)atof(charFilter(yytext)));
	mb.printf("Random seed specified:%s\n",yytext+12);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 293 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE);
	mb.printf("Penalize the individuals that have a size less than %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 299 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE_AT_END);
	mb.printf("Penalize the individuals that have a size less than %d at end\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 305 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PARETO_SELECTION_ITERATION);
	mb.printf("Pareto selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 312 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)) ,TOTAL_TIME);
	mb.printf("Time spent on the learning process %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 318 "lex_conf.l"
{
	if(!strcasecmp(yytext+14,"MAJOR")) {
		cm.setParameter(MAJOR,DEFAULT_CLASS);
		mb.printf("Majoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"MINOR")) {
		cm.setParameter(MINOR,DEFAULT_CLASS);
		mb.printf("Minoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"DISABLED")) {
		cm.setParameter(DISABLED,DEFAULT_CLASS);
		mb.printf("Default class disabled\n");
	} else {
		cm.setParameter(atoi(charFilter(yytext)) ,DEFAULT_CLASS);
		mb.printf("Default class set to class :%d\n",atoi(charFilter(yytext)));
	}
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 334 "lex_conf.l"
{
	cm.setParameter(1 ,SMART_INIT);
	mb.printf("Initialization uses examples to create the initial rules\n");
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 339 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_INIT);
	mb.printf("Instances used in initialization are sampled with uniform class distribution\n");
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 344 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_ACC);
	mb.printf("Training accuracy computation will be class-wise\n");
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 350 "lex_conf.l"
{
	cm.setParameter(1 ,DUMP_ACTIVATION);
	mb.printf("Dump average activation after initialization\n");
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 356 "lex_conf.l"
{
	 if(!strcasecmp(yytext+15,"FTB")) {
		cm.setParameter(FTB,PRUNING_POLICY);
		mb.printf("Rule pruning policy is front to back\n");
	} else if(!strcasecmp(yytext+15,"BTF")) {
		cm.setParameter(BTF,PRUNING_POLICY);
		mb.printf("Rule pruning policy is back to front\n");
	} else if(!strcasecmp(yytext+15,"RANDOM")) {
		cm.setParameter(RANDOM,PRUNING_POLICY);
		mb.printf("Rule pruning policy is random\n");
	} else {
		mb.printf("Unknown pruning policy:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 373 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SMART_CROSSOVER);
	mb.printf("Smart crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 378 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),NUM_PARENTS_SMART_CROSSOVER);
	mb.printf("Number of parents in smart crossover: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 384 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),FILTER_SMART_CROSSOVER);
	mb.printf("Smart crossover filter threshold: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 390 "lex_conf.l"
{
	cm.setParameter(1,ADD_RULES_SMART_CROSSOVER);
	mb.printf("Smart crossover adds new rules\n");
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 395 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_ORDERING);
	mb.printf("Number of repetitions of the rule ordering process in SmartX: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 400 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_WITH_SMART_CROSSOVER);
	mb.printf("Elitism stage will use smart crossover\n");
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 404 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_LAST_ITERATION_WITH_SMART_CROSSOVER);
	mb.printf("Last iteration of elitism stage will use smart crossover\n");
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 410 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_CLEANING_PROB);
	mb.printf("Rule cleaning probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 415 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_GENERALIZING_PROB);
	mb.printf("Rule generalizing probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 421 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),DUMP_GENOTYPE_ITERATIONS);
	mb.printf("Genotype of best individual is dumped every %d iterations\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 426 "lex_conf.l"
{
	mb.enable();
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 430 "lex_conf.l"
{
	mb.printf("Crossover will use informed cut points (cutPoints.dat)\n");
	cm.setParameter(1,INFORMED_CROSSOVER);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 435 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_INIT);
	mb.printf("Coverage ratio in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 440 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),EXPRESSED_ATT_INIT);
	mb.printf("Number of expressed attributes in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 446 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_BREAKPOINT);
	mb.printf("Coverage breakpoint for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 451 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_RATIO);
	mb.printf("Coverage ratio for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 457 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_LEARNING);
	mb.printf("Number of times we will try to learn a rule from the current training set: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 463 "lex_conf.l"
{
	mb.printf("Hyperrectangle attribute list knowledge representation\n");
	cm.setParameter(1,HYPERRECT_LIST);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 468 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_GENERALIZE_LIST);
	mb.printf("Probability of generalizing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 473 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SPECIALIZE_LIST);
	mb.printf("Probability of specializing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 478 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MIN_INTERVAL_SIZE_INIT);
	mb.printf("Lower bound of attribute interval: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 483 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MAX_INTERVAL_SIZE_INIT);
	mb.printf("Upper bound of attribute interval: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 488 "lex_conf.l"
{
	/*mb.printf("Intervalar representation will use rotations\n");
	cm.setParameter(1,ROTATE_HYPERRECTANGLES);*/
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 493 "lex_conf.l"
{
	/*mb.printf("Only a subset of attributes will be rotated (rotatedAttributes.dat)\n");
	cm.setParameter(1,RESTRICTED_ROTATED_ATTRIBUTES);*/
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 499 "lex_conf.l"
{
	/*cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_INIT);
	mb.printf("Probability of setting an angle to 0 degrees in initialization: %f\n",atof(charFilter(yytext)));*/
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 504 "lex_conf.l"
{
	/*cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_MUT);
	mb.printf("Probability of setting an angle to 0 degrees in mutation: %f\n",atof(charFilter(yytext)));*/
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 509 "lex_conf.l"
{
	mb.printf("Dump statistics of the attributes in the ALKR representation\n");
	cm.setParameter(1,DUMP_ATTRIBUTE_STATISTICS);
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 514 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MAX_RULES);
	mb.printf("Maximum number of rules learnt with BioHEL: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 520 "lex_conf.l"
{
	mb.printf("Use hyperrect list real KR with greater than predicates\n");
	cm.setParameter(1,USE_GREATER_THAN_PREDICATES);
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 525 "lex_conf.l"
{
	mb.printf("The creation of the strata in the ILAS windowing will use the DOB method\n");
	cm.setParameter(1,DOB_PARTITIONS_IN_WINDOWING);
}
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 533 "lex_conf.l"
/* eat up one-line comments */
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 535 "lex_conf.l"
/* eat up whitespace */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 537 "lex_conf.l"
mb.printf( "Unrecognized character: %s\n", yytext );
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 539 "lex_conf.l"
ECHO;
	YY_BREAK
#line 2703 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1513 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1513 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1512);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 539 "lex_conf.l"


int yywrap ()
{
	return 1;
}

char *charFilter(char *string)
{
	while(*string && !(isdigit(*string) || *string=='-')) string++;
	return string;
}

void parseConfig(char *configFile)
{
	int i;

	yyin = fopen( configFile, "r" );
	yylex();
}								 

